#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 26 16:35:29 2021

@author: brian
"""

import os
from pathlib import Path
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from gittislab import signals, plots, behavior, dataloc, ethovision_tools, model
if ('COMPUTERNAME' in os.environ.keys()) \
    and (os.environ['COMPUTERNAME'] == 'DESKTOP-UR8URCE'):
        
    basepath = 'F:\\Users\\Gittis\\Dropbox\\Gittis Lab Data\\OptoBehavior\\'
else:
    basepath='/home/brian/Dropbox/Gittis Lab Data/OptoBehavior/'

#%% Load in light curve calibration for Dial = 740:
    
fn = Path('/home/brian/Dropbox/Arduino/gittis/blue_laser_power_control_sweep_0-255_arduino_TTL_dial_740.csv')

df_cal=pd.read_csv(fn,sep=';')
# plt.figure()
y=df_cal.loc[:,'Power (W)'] *1000 # Put in mW
# plt.plot(df_cal.loc[:,'Samples '],y)

#locate drop offs:
d=np.diff(y)
on,off=signals.thresh(d,-3,'Neg')


onsets= np.array(off[0:-1])+1
offsets =np.array( off[1:])

# for o,oo in zip(onsets,offsets):
#     plt.plot([o,o],[0,10],'--r')
#     plt.plot([oo,oo],[0,10],'--g')
newclips=[]
for o,f in zip(onsets,offsets):
    dd= f-o
    if dd > 62:
        o=f-62
    if dd < 62:
        o= o-(62-dd)
        
    t=y[o:f]
    print(len(t))
    newclips.append(t.values)

dat=np.stack(newclips)

x=[x for x in range(0,255,round(255/62))]
x=x[2:]
ax=plots.mean_cont_plus_conf_array(x,dat.T,)
mean_power=np.mean(dat,axis=0)
f = np.polyfit(x,mean_power,deg=2)
p = np.poly1d(f)
plt.sca(ax)
plt.plot(x,p(x),'r')

ax.set_ylabel('Blue laser output (mW)')
ax.set_xlabel('Arduino PWM level')
# %% Load in 10x10 day for comparison:
# pnfn=Path('/home/brian/Dropbox/Gittis Lab Data/OptoBehavior/Str/Naive/A2A/Ai32/Bilateral/10x10_hm4di_saline/AG6846_5_BI040121/Raw_AG6846_5_BI040121.csv')
pnfn=Path('/home/brian/Dropbox/Gittis Lab Data/OptoBehavior/Str/Naive/A2A/Ai32/Bilateral/10x10_hm4di_cno/AG6846_5_BI033021/Raw_AG6846_5_BI033021.csv')
raw,meta=ethovision_tools.csv_load(pnfn,columns='All',method='raw' )
meta['stim_dur']=2
meta['stim_off']=meta['stim_on'] + 2
meta['stim_mean_dur']=2

percentage = lambda x: (np.nansum(x)/len(x))*100
m_clip= behavior.stim_clip_grab(raw,meta,y_col='im', 
                               stim_dur=2,
                               baseline = 2,
                               summarization_fun=percentage)
print(np.mean(m_clip['disc'][:,1]))
# %% 

ex0=['exclude','Bad','GPe','bad','Broken', 'grooming',
 'Exclude','Other XLS']
exc=[ex0]
save = True
inc=[['AG','Str','A2A','Ai32','50x2_hm4di_sal',]]
# inc=[['AG','Str','A2A','Ai32','50x2_hm4di_cno',]]
# inc=[['AG','Str','A2A','Ai32','50x2_multi_mW',]]
pns=dataloc.raw_csv(basepath,inc[0],ex0)
if not isinstance(pns,list):
    pns=[pns]

plots.plot_light_curve_sigmoid(pns,p,save=False )
    
# %%  Bootsrap data to get a fit
ii = 0 # of saline, sigmoid not fitting

raw,meta=ethovision_tools.csv_load(pns[ii],columns='All',method='raw' )
trial_fn=dataloc.gen_paths_recurse(pns[ii].parent,filetype = 'pwm_output*.csv')
trials=pd.read_csv(trial_fn)

#% Percent Time Immobile
if len(meta['stim_dur']) > 50:
    doubled=True
if doubled:
    meta.drop(axis=0,index=range(0,100,2),inplace=True)
    meta.reset_index(inplace=True)
percentage = lambda x: (np.nansum(x)/len(x))*100
m_clip= behavior.stim_clip_grab(raw,meta,y_col='im', 
                               stim_dur=2,
                               baseline = 2,
                               summarization_fun=percentage)

y=m_clip['disc'][:,1]
x=p(trials.loc[:,'PWM'].values)
# inc = x < 3 #undersampled
# y=y[inc]
# x=x[inc]
plt.figure()
plt.plot(x,y,'ok')

#Bin per mW and average:
ym=[]
for i in range(0,8,1):
    ind = (x >= i) & (x < (i+1))
    mbin= np.mean(y[ind])
    ym.append(mbin)
xm=[i+0.5 for i in range(0,8,1)]
plt.plot(xm,ym,'or')
all_base=m_clip['disc'][:,0]
all_base=all_base[~np.isnan(all_base)]
base_zer=np.zeros(all_base.shape)
base_mean=np.nanmean(all_base)
plt.plot(0,base_mean,'*b')
# xf = np.append(x,np.zeros(len(m_clip['disc'][:,0])))
# yf = np.append(y,m_clip['disc'][:,0])


xs=[i/100 for i in range(25,800,1)]
cont = True
subsamp_by = 5
i=0
desired_good = 50
good=0
keep_po=[]
bad = 0
while cont:
    ind= [np.random.randint(0,len(x)-1) for i in range(0,len(x)-subsamp_by)]
    x_r=x[ind]
    y_r=y[ind]
    try:        
        #print('Attempt %d' % i)
        i += 1
        # np.random
        po,pc = model.fit_sigmoid(x_r,y_r,method='lm') # np.append(x,base_zer),np.append(y,all_base)

        good += 1
        if good >= desired_good:
            cont = False
        else:
            keep_po.append(po)
    except:
        #print(errmsg)
       bad +=1
all_po=np.median(np.stack(keep_po),axis=0)
ys=model.sigmoid(xs, all_po[0], all_po[1], all_po[2],all_po[3])
plt.plot(xs,ys,'b')
plt.xlabel('Power (mW)')
plt.ylabel('% Time Immobile')
plt.title('%d, %s' % (ii,meta['anid'][0]))
if save == True:
    path_dir = str(meta['pn'][0].parent)
    anid= meta['anid'][0]
    proto=meta['etho_exp_type'][0]
    plt.show(block=False)
    plt.savefig(path_dir + '/%s_%s_summary_v%d.png' %  (anid,proto,0))
    
